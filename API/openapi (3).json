{
  "openapi": "3.0.3",
  "info": {
    "title": "MoneyTree Banking API",
    "description": "",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://footballfriendlies-582a7.nw.r.appspot.com"
    }
  ],
  "tags": [
    {
      "name": "companies",
      "description": "Getting/Changing company information"
    },
    {
      "name": "User",
      "description": "Access to User information"
    },
    {
      "name": "transactions",
      "description": "Create a transaction"
    }
  ],
  "paths": {
    "/api/companies": {
      "get": {
        "tags": [
          "companies"
        ],
        "summary": "returns all companies stored within the database",
        "description": "Gets all company information from all companies in the database",
        "operationId": "GetAllCompanies",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTransaction"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/api/companies/companyScore/{accountNumber}": {
      "get": {
        "tags": [
          "companies"
        ],
        "summary": "Gets a company RAG score from the accountNumber",
        "description": "Gets a company RAG score from the accountNumber",
        "operationId": "getCompanyRAGScore",
        "parameters": [
          {
            "name": "accountNumber",
            "in": "path",
            "description": "Company Account Number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid account number"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/api/companies/similarCompanies/{accountNumber}": {
      "get": {
        "tags": [
          "companies"
        ],
        "summary": "Finds similar companies with better RAG score",
        "description": "Place account number in URL after similarCompanies",
        "operationId": "FindSimilarCompanies",
        "parameters": [
          {
            "name": "accountNumber",
            "in": "path",
            "description": "Account number of company.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid account number"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/api/companies/updateEnvironmentalImpactScore": {
      "put": {
        "tags": [
          "companies"
        ],
        "summary": "Update a specific companies environmental impact score",
        "description": "takes the company ID and all the scores, or just single ones in the body.",
        "operationId": "UpdateEnvironmentalImpactScore",
        "parameters": [
          {
            "name": "Account Number",
            "in": "query",
            "description": "Account number of company which you want to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "xxxxxxxxx"
            }
          },
          {
            "name": "Sustainability Pratices",
            "in": "query",
            "description": "Score from 0 to 10 representing their sustainabillity practices",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Waste Management",
            "in": "query",
            "description": "Score from 0 to 10 representing their waste management practices",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Carbon Emissions",
            "in": "query",
            "description": "Score from 0 to 10 representing their carbon emissions",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Company not Found"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/api/companies/lazy_load_company": {
      "get": {
        "tags": [
          "companies"
        ],
        "summary": "Gets just the company names and corresponding account numbers from the database",
        "description": "",
        "operationId": "lazyLoadCompany",
        "responses": {
          "200": {
            "description": "Successful Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LazyLoadCompany"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/user_transactions": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Gets a users transactions",
        "description": "",
        "operationId": "GetUserTransactions",
        "parameters": [
          {
            "name": "accountNumber",
            "in": "query",
            "description": "Account number of user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "User Not Found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/api/user_transactions/to": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Returns user transactions to a specific company",
        "description": "Returns user transactions to a specific company defined by the company account number",
        "operationId": "GetUserTransactionTo",
        "parameters": [
          {
            "name": "CompanyAccountNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          {
            "name": "UserAccountNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserTransactionToRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTransactionResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/api/user/update_balance": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update user balance",
        "description": "Increment/decrement user balance",
        "operationId": "UpdateUserBalance",
        "parameters": [
          {
            "name": "UserAccountNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BalanceDifference",
            "in": "query",
            "description": "+- value",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateBalanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdateBalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body."
          },
          "422": {
            "description": "Not enough user funds."
          }
        }
      }
    },
    "/api/user/add": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Add new User",
        "description": "",
        "operationId": "AddNewUser",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "First name of new user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "age",
            "in": "query",
            "required": true,
            "description": "Age of the new user",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountbalance",
            "in": "query",
            "required": true,
            "description": "starting balance of the new user",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/api/transactions/create": {
      "post": {
        "tags": [
          "transactions"
        ],
        "summary": "Create a user transaction",
        "description": "",
        "operationId": "CreateTransaction",
        "parameters": [
          {
            "name": "UserAccountNumber",
            "in": "query",
            "required": true,
            "description": "Account number of the user",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "CompanyAccountNumber",
            "in": "query",
            "required": true,
            "description": "Account number of company to which the funds are going",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Amount",
            "in": "query",
            "required": true,
            "description": "Amount of money in this transaction",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransactionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Insufficient Funds / Company Not Found"
          }
        }
      }
    },
    "/api/transactions/filterByDate": {
      "post": {
        "tags": [
          "transactions"
        ],
        "summary": "get all transactions made by user between two dates",
        "description": "",
        "operationId": "transactionsFilterByDate",
        "parameters": [
          {
            "name": "userAccountNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 27624380022
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DD"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DD"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dateFilterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTransactionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserTransactionRequest": {
        "type": "object",
        "properties": {
          "UserAccountNumber": {
            "type": "integer",
            "format": "int64",
            "example": 12345678910
          }
        },
        "xml": {
          "name": "UserTransaction"
        }
      },
      "UserTransactionResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "66ed514ba8eac352649e9f0a"
          },
          "from": {
            "type": "integer",
            "format": "int64",
            "example": 12345678910
          },
          "to": {
            "type": "string",
            "example": "123456789"
          },
          "Time": {
            "type": "string",
            "example": "2024-09-05T05:12:46.030Z"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "example": 200
          }
        }
      },
      "UserTransactionToRequest": {
        "type": "object",
        "properties": {
          "CompanyAccountNumber": {
            "type": "string",
            "example": "123456789"
          },
          "UserAccountNumber": {
            "type": "integer",
            "format": "int64",
            "example": 12345678910
          }
        },
        "xml": {
          "name": "UserTransactionTo"
        }
      },
      "UserUpdateBalanceRequest": {
        "type": "object",
        "properties": {
          "UserAccountNumber": {
            "type": "integer",
            "format": "int64",
            "example": 12345678910
          },
          "BalanceDifference": {
            "type": "integer",
            "format": "int64",
            "example": 200
          }
        },
        "xml": {
          "name": "UpdateUserBalance"
        }
      },
      "UserUpdateBalanceResponse": {
        "type": "object",
        "properties": {
          "acknowledged": {
            "type": "boolean",
            "example": true
          },
          "modifiedCount": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "upsertedId": {
            "type": "string",
            "example": null
          },
          "upsertedCount": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "matchedCount": {
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "UserAddRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John"
          },
          "age": {
            "type": "integer",
            "format": "int64",
            "example": 25
          },
          "UserBalance": {
            "type": "integer",
            "format": "int64",
            "example": 500
          }
        },
        "xml": {
          "name": "UserAdd"
        }
      },
      "UserFindRequest": {
        "type": "object",
        "properties": {
          "UserAccountNumber": {
            "type": "integer",
            "format": "int64",
            "example": 12345678910
          }
        },
        "xml": {
          "name": "UserFind"
        }
      },
      "CreateTransactionRequest": {
        "type": "object",
        "properties": {
          "UserAccountNumber": {
            "type": "integer",
            "format": "int64",
            "example": 1234567891
          },
          "CompanyAccountNumber": {
            "type": "string",
            "example": "123456789"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "example": 200
          }
        }
      },
      "CreateTransactionResponse": {
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64",
            "example": 12345678910
          },
          "to": {
            "type": "string",
            "example": "123456789"
          },
          "Time": {
            "type": "string",
            "example": "2024-09-05T05:12:46.030Z"
          },
          "amount": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "ragScore": {
            "type": "integer",
            "format": "int64",
            "example": 7
          }
        }
      },
      "LazyLoadCompany": {
        "type": "object",
        "properties": {
          "CompanyName": {
            "type": "string",
            "example": "RedFuel Services"
          },
          "AccountNumber": {
            "type": "string",
            "example": "000000001"
          }
        }
      },
      "dateFilterRequest": {
        "type": "object",
        "properties": {
          "userAccountNumber": {
            "type": "integer",
            "format": "int64",
            "example": 27624380022
          },
          "startDate": {
            "type": "string",
            "example": "YYYY-MM-DD"
          },
          "endDate": {
            "type": "string",
            "example": "YYYY-MM-DD"
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}